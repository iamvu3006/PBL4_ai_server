import os
import pickle
import numpy as np
import random
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.preprocessing import image
from flask import Flask, request, render_template, jsonify

# === 0Ô∏è‚É£ C·∫•u h√¨nh chung ===
SEED = 42
np.random.seed(SEED)
tf.random.set_seed(SEED)
random.seed(SEED)

print("üîß ƒêang ch·∫°y TensorFlow tr√™n CPU...")
tf.config.set_visible_devices([], 'GPU')  # T·∫Øt GPU ƒë·ªÉ tr√°nh c·∫£nh b√°o CUDA

UPLOAD_FOLDER = "static/uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# === 1Ô∏è‚É£ Load model t·ª´ pickle ===
MODEL_PATH = "cnn_model.pkl"
try:
    with open(MODEL_PATH, "rb") as f:
        old_model = pickle.load(f)
    print("‚úÖ ƒê√£ load model .pkl th√†nh c√¥ng!")
except Exception as e:
    print("‚ùå L·ªói khi load model .pkl:", e)
    exit()

# === 2Ô∏è‚É£ T·∫°o l·∫°i ƒë√∫ng ki·∫øn tr√∫c model ===
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(1, activation='sigmoid')
])

print("‚úÖ Model ƒë√£ kh·ªüi t·∫°o l·∫°i th√†nh c√¥ng!")

# --- Flask app setup ---
app = Flask(_name_)
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER

# === 3Ô∏è‚É£ H√†m x·ª≠ l√Ω d·ª± ƒëo√°n ===
def predict_image(img_path):
    img = image.load_img(img_path, target_size=(64, 64))
    img = img.convert("RGB")
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0) / 255.0

    prediction = model.predict(img_array, verbose=0)
    label = "üçÉ L√° t·ªët" if prediction[0][0] < 0.51 else "üçÇ L√° x·∫•u"
    return label, float(prediction[0][0])

# === 4Ô∏è‚É£ Route trang ch·ªß (web upload) ===
@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        file = request.files.get("file")
        if not file:
            return render_template("index.html", result="‚ö†Ô∏è Ch∆∞a ch·ªçn ·∫£nh!")
        save_path = os.path.join(app.config["UPLOAD_FOLDER"], file.filename)
        file.save(save_path)

        label, prob = predict_image(save_path)
        return render_template("index.html", result=f"{label} ({prob:.4f})", img_path=save_path)
    return render_template("index.html")

# === 5Ô∏è‚É£ Route API (POST /api/predict) ===
@app.route("/api/predict", methods=["POST"])
def api_predict():
    file = request.files.get("file")
    if not file:
        return jsonify({"error": "Ch∆∞a upload file!"}), 400
    save_path = os.path.join(app.config["UPLOAD_FOLDER"], file.filename)
    file.save(save_path)
    label, prob = predict_image(save_path)
    return jsonify({"label": label, "probability": prob})

# === 6Ô∏è‚É£ Ch·∫°y server ===
if _name_ == "_main_":
    app.run(host="0.0.0.0", port=5000)